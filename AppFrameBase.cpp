//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: AppFrameBase.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "AppFrameBase.h"


// Declare the bitmap loading function
extern void wxC2843InitBitmapResources();

static bool bBitmapLoaded = false;


AppFrameBase::AppFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC2843InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    main_sizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(main_sizer);
    
    CurrentSession = new wxBoxSizer(wxHORIZONTAL);
    
    main_sizer->Add(CurrentSession, 1, wxALL, WXC_FROM_DIP(5));
    
    CCT = new wxTextCtrl(this, wxID_ANY, wxT("Current Session"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    CCT->SetHint(wxT(""));
    #endif
    
    CurrentSession->Add(CCT, 0, wxALL, WXC_FROM_DIP(5));
    CCT->SetMinSize(wxSize(200,-1));
    
    CurrentSession->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    CurrentConnectTime = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    CurrentConnectTime->SetHint(wxT(""));
    #endif
    
    CurrentSession->Add(CurrentConnectTime, 0, wxALL, WXC_FROM_DIP(5));
    CurrentConnectTime->SetMinSize(wxSize(200,-1));
    
    m_staticLine156 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    main_sizer->Add(m_staticLine156, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    CurrentUp = new wxBoxSizer(wxHORIZONTAL);
    
    main_sizer->Add(CurrentUp, 0, wxALL, WXC_FROM_DIP(5));
    
    CU = new wxTextCtrl(this, wxID_ANY, wxT("Current Up"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    CU->SetHint(wxT(""));
    #endif
    
    CurrentUp->Add(CU, 0, wxALL, WXC_FROM_DIP(5));
    CU->SetMinSize(wxSize(200,-1));
    
    CurrentUp->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    CurrentUpload = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    CurrentUpload->SetHint(wxT(""));
    #endif
    
    CurrentUp->Add(CurrentUpload, 0, wxALL, WXC_FROM_DIP(5));
    CurrentUpload->SetMinSize(wxSize(200,-1));
    
    m_staticLine1561 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    main_sizer->Add(m_staticLine1561, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    CurrentDown = new wxBoxSizer(wxHORIZONTAL);
    
    main_sizer->Add(CurrentDown, 0, wxALL, WXC_FROM_DIP(5));
    
    CD = new wxTextCtrl(this, wxID_ANY, wxT("Current Down"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    CD->SetHint(wxT(""));
    #endif
    
    CurrentDown->Add(CD, 0, wxALL, WXC_FROM_DIP(5));
    CD->SetMinSize(wxSize(200,-1));
    
    CurrentDown->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    CurrentDownload = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    CurrentDownload->SetHint(wxT(""));
    #endif
    
    CurrentDown->Add(CurrentDownload, 0, wxALL, WXC_FROM_DIP(5));
    CurrentDownload->SetMinSize(wxSize(200,-1));
    
    m_staticLine15612 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    main_sizer->Add(m_staticLine15612, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    TotalUp = new wxBoxSizer(wxHORIZONTAL);
    
    main_sizer->Add(TotalUp, 0, wxALL, WXC_FROM_DIP(5));
    
    TU = new wxTextCtrl(this, wxID_ANY, wxT("Total Up"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    TU->SetHint(wxT(""));
    #endif
    
    TotalUp->Add(TU, 0, wxALL, WXC_FROM_DIP(5));
    TU->SetMinSize(wxSize(200,-1));
    
    TotalUp->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    TotalUpload = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    TotalUpload->SetHint(wxT(""));
    #endif
    
    TotalUp->Add(TotalUpload, 0, wxALL, WXC_FROM_DIP(5));
    TotalUpload->SetMinSize(wxSize(200,-1));
    
    m_staticLine156123 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    main_sizer->Add(m_staticLine156123, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    TotalDown = new wxBoxSizer(wxHORIZONTAL);
    
    main_sizer->Add(TotalDown, 0, wxALL, WXC_FROM_DIP(5));
    
    TD = new wxTextCtrl(this, wxID_ANY, wxT("Total Down"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    TD->SetHint(wxT(""));
    #endif
    
    TotalDown->Add(TD, 0, wxALL, WXC_FROM_DIP(5));
    TD->SetMinSize(wxSize(200,-1));
    
    TotalDown->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    TotalDownload = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    TotalDownload->SetHint(wxT(""));
    #endif
    
    TotalDown->Add(TotalDownload, 0, wxALL, WXC_FROM_DIP(5));
    TotalDownload->SetMinSize(wxSize(200,-1));
    
    m_staticLine1561234 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    main_sizer->Add(m_staticLine1561234, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    TotalUpDown = new wxBoxSizer(wxHORIZONTAL);
    
    main_sizer->Add(TotalUpDown, 0, wxALL, WXC_FROM_DIP(5));
    
    TUD = new wxTextCtrl(this, wxID_ANY, wxT("Total (Up + Down)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    TUD->SetHint(wxT(""));
    #endif
    
    TotalUpDown->Add(TUD, 0, wxALL, WXC_FROM_DIP(5));
    TUD->SetMinSize(wxSize(200,-1));
    
    TotalUpDown->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    TotalUploadDownload = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    TotalUploadDownload->SetHint(wxT(""));
    #endif
    
    TotalUpDown->Add(TotalUploadDownload, 0, wxALL, WXC_FROM_DIP(5));
    TotalUploadDownload->SetMinSize(wxSize(200,-1));
    
    m_pBackgroundTimer = new wxTimer;
    
    SetName(wxT("AppFrameBase"));
    SetMinClientSize(wxSize(300,-1));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(AppFrameBase::OnClose), NULL, this);
    m_pBackgroundTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(AppFrameBase::OnBackgroundTimer), NULL, this);
    
}

AppFrameBase::~AppFrameBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(AppFrameBase::OnClose), NULL, this);
    m_pBackgroundTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(AppFrameBase::OnBackgroundTimer), NULL, this);
    
    m_pBackgroundTimer->Stop();
    wxDELETE( m_pBackgroundTimer );

}
